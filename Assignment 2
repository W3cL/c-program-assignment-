
1.
#include <stdio.h>

Int main() {
    Int arr[5] = {12, 56, 34, 78, 100};
    Int n = 5;
    Int max = arr[0];
    
    For (int I = 1; I < n; i++) {
        If (arr[i] > max) {
            Max = arr[i];
        }
    }
    
    Printf(“The largest element in the array is: %d”, max);
    
    Return 0;
}

2.
include <stdio.h>

Int main() {
    Int arr[100], n, largest, second_largest;
    Printf(“Enter the number of elements in the array: “);
    Scanf(“%d”, &n);

    Printf(“Enter %d integers: “, n);
    For (int I = 0; I < n; i++) {
        Scanf(“%d”, &arr[i]);
    }

    Largest = arr[0];
    Second_largest = arr[1];

    For (int I = 1; I < n; i++) {
        If (arr[i] > largest) {
            Second_largest = largest;
            Largest = arr[i];
        }
        Else if (arr[i] > second_largest && arr[i] != largest) {
            Second_largest = arr[i];
        }
    }

    Printf(“The largest element is %d\n”, largest);
    Printf(“The second largest element is %d\n”, second_largest);

    Return 0;
}


3.
#include <stdio.h>

Void sortArrayDescending(int arr[], int n) {
    Int I, j, temp;
    For (I = 0; I < n – 1; i++) {
        For (j = I + 1; j < n; j++) {
            If (arr[i] < arr[j]) {
                Temp = arr[i];
                Arr[i] = arr[j];
                Arr[j] = temp;
            }
        }
    }
}

Int main() {
    Int arr[100], n, I, secondLargest, secondSmallest, sum;
    Float avg;

    Printf(“Enter the number of elements in the array: “);
    Scanf(“%d”, &n);

    Printf(“Enter %d integers: “, n);
    For (I = 0; I < n; i++) {
        Scanf(“%d”, &arr[i]);
    }

    sortArrayDescending(arr, n);

    secondLargest = arr[1];
    secondSmallest = arr[n – 2];
    sum = secondLargest + secondSmallest;
    avg = (float) sum / 2;

    for (I = 0; I < n; i++) {
        if (arr[i] == avg) {
            printf(“The average of second largest and second smallest element, %0.2f, is found in the array.\n”, avg);
            break;
        }
    }

    If (I == n) {
        Printf(“The average of second largest and second smallest element, %0.2f, is not found in the array.\n”, avg);
    }

    Return 0;
}


4.

#include <stdio.h>

Int main() {
    Int array[] = {10, 15, 90, 200, 110};
    Int n = sizeof(array) / sizeof(array[0]);
    Int max_diff = 0;
    Int min_elem = array[0];

    For (int I = 1; I < n; i++) {
        Int diff = array[i] – min_elem;
        If (diff > max_diff) {
            Max_diff = diff;
        }
        If (array[i] < min_elem) {
            Min_elem = array[i];
        }
    }

    Printf(“Maximum difference is %d\n”, max_diff);

    Return 0;
}


5.
#include <stdio.h>

Int main() {
    Int arr[] = {1, 2, 4, 5, 4, 2, 7, 5};
    Int n = sizeof(arr) / sizeof(arr[0]);
    For (int I = 0; I < n; i++) {
        For (int j = I + 1; j < n;) {
            If (arr[j] == arr[i]) {
                For (int k = j; k < n; k++) {
                    Arr[k] = arr[k+1];
                }
            } else {
                J++;
            }
        }
    }

    Printf(“Resultant Array after removing duplicates: “);
    For (int I = 0; I < n; i++) {
        Printf(“%d “, arr[i]);
    }

    Return 0;
}


6.
#include <stdio.h>

Int main() {
    Int arr[] = {2, 5, 7, 10, 12, 15};
    Int n = sizeof(arr) / sizeof(arr[0]);
    Int even[n], odd[n];
    Int even_count = 0, odd_count = 0;

    // loop through the array
    For (int I = 0; I < n; i++) {
        If (arr[i] % 2 == 0) {
            Even[even_count] = arr[i];
            Even_count++;
        } else {
            Odd[odd_count] = arr[i];
            Odd_count++;
        }
    }

    Printf(“Even elements of the array: “);
    For (int I = 0; I < even_count; i++) {
        Printf(“%d “, even[i]);
    }
    Printf(“\n”);

    Printf(“Odd elements of the array: “);
    For (int I = 0; I < odd_count; i++) {
        Printf(“%d “, odd[i]);
    }
    Printf(“\n”);

    Return 0;
}


7.
#include <stdio.h>

Int main() {
    Int arr[] = {1, 2, 3, 2, 1};
    Int n = sizeof(arr) / sizeof(arr[0]);
    Int reversed[n];

    // reverse the array and store it in a new array
    For (int I = 0; I < n; i++) {
        Reversed[i] = arr[n – I – 1];
    }

    // check if the reversed array is equal to the original array
    Int is_palindrome = 1;
    For (int I = 0; I < n; i++) {
        If (reversed[i] != arr[i]) {
            Is_palindrome = 0;
            Break;
        }
    }

    If (is_palindrome) {
        Printf(“The array is a palindrome\n”);
    } else {
        Printf(“The array is not a palindrome\n”);
    }

    Return 0;
}


8.
#include <stdio.h>

Int main() {
    Int arr[] = {1, 2, 3, 2, 1, 1, 4};
    Int n = sizeof(arr) / sizeof(arr[0]);
    Int freq[n];
    Int visited[n];

    // initialize freq and visited arrays
    For (int I = 0; I < n; i++) {
        Freq[i] = 1;
        Visited[i] = 0;
    }

    // count the frequency of each element
    For (int I = 0; I < n; i++) {
        If (visited[i] == 1) {
            Continue;
        }
        For (int j = I + 1; j < n; j++) {
            If (arr[i] == arr[j]) {
                Freq[i]++;
                Visited[j] = 1;
            }
        }
    }

    // print the frequency of each element
    Printf(“Element   Frequency\n”);
    For (int I = 0; I < n; i++) {
        If (visited[i] == 0) {
            Printf(“%d         %d\n”, arr[i], freq[i]);
        }
    }

    Return 0;
}



9.
#include <stdio.h>

Int main() {
    Int arr[100], n, I, j, temp;

    Printf(“Enter the value of N: “);
    Scanf(“%d”, &n);

    Printf(“Enter the numbers: \n”);
    For (I = 0; I < n; i++) {
        Scanf(“%d”, &arr[i]);
    }

    // sort the array in descending order
    For (I = 0; I < n – 1; i++) {
        For (j = 0; j < n – I – 1; j++) {
            If (arr[j] < arr[j + 1]) {
                Temp = arr[j];
                Arr[j] = arr[j + 1];
                Arr[j + 1] = temp;
            }
        }
    }

    // print the sorted array in descending order
    Printf(“The numbers arranged in descending order are given below:\n”);
    For (I = 0; I < n; i++) {
        Printf(“%d\n”, arr[i]);
    }

    Return 0;
}


10.
#include <stdio.h>
#include <limits.h>

Int minJumps(int arr[], int n) {
    // if the array has only one element or the first element is 0, we can’t reach the end
    If (n <= 1 || arr[0] == 0) {
        Return -1;
    }
    
    // initialize variables for current max reach, current steps, and jumps
    Int maxReach = arr[0], steps = arr[0], jumps = 1;
    
    // loop through the array
    For (int I = 1; I < n; i++) {
        // if we have reached the end of the array, return the number of jumps
        If (I == n – 1) {
            Return jumps;
        }
        
        // update the max reach
        maxReach = (maxReach > I + arr[i]) ? maxReach : I + arr[i];
        
        // decrement the steps required to reach this index
        Steps--;
        
        // if the steps required to reach this index is 0, take a jump
        If (steps == 0) {
            Jumps++;
            
            // if the current index is greater than the current max reach, we can’t reach the end
            If (I >= maxReach) {
                Return -1;
            }
            
            // update the steps required to reach the next index
            Steps = maxReach – I;
        }
    }
    
    Return -1;
}

Int main() {
    Int arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9};
    Int n = sizeof(arr) / sizeof(arr[0]);
    Int jumps = minJumps(arr, n);
    
    If (jumps == -1) {
        Printf(“The end is not reachable.\n”);
    } else {
        Printf(“The minimum number of jumps to reach the end is %d.\n”, jumps);
    }
    
    Return 0;
}